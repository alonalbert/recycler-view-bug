//
// DO NOT EDIT THIS FILE.
// Generated using AndroidAnnotations 4.4.0.
//
// You can create a larger work that contains this file and distribute that work under terms of your choice.
//

package com.example.al.recyclerviewbug.working_annotatated;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;

import com.example.al.recyclerviewbug.R;

import org.androidannotations.api.builder.ActivityIntentBuilder;
import org.androidannotations.api.builder.PostActivityStarter;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

@SuppressLint({
    "Registered"
})
public final class WorkingAnnotatedRecyclerViewActivity_
    extends WorkingAnnotatedRecyclerViewActivity
    implements HasViews, OnViewChangedListener
{
  private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();

  @Override
  public void onCreate(Bundle savedInstanceState) {
    OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
    init_(savedInstanceState);
    super.onCreate(savedInstanceState);
    OnViewChangedNotifier.replaceNotifier(previousNotifier);
    setContentView(R.layout.activity_recycler_view);
  }

  @Override
  public<T extends View> T internalFindViewById(int id) {
    return ((T) this.findViewById(id));
  }

  private void init_(Bundle savedInstanceState) {
    OnViewChangedNotifier.registerOnViewChangedListener(this);
    this.adapter = WorkingAnnotatedRecyclerViewActivity_.Adapter_.getInstance_(this);
  }

  @Override
  public void setContentView(int layoutResID) {
    super.setContentView(layoutResID);
    onViewChangedNotifier_.notifyViewChanged(this);
  }

  @Override
  public void setContentView(View view, LayoutParams params) {
    super.setContentView(view, params);
    onViewChangedNotifier_.notifyViewChanged(this);
  }

  @Override
  public void setContentView(View view) {
    super.setContentView(view);
    onViewChangedNotifier_.notifyViewChanged(this);
  }

  public static WorkingAnnotatedRecyclerViewActivity_.IntentBuilder_ intent(Context context) {
    return new WorkingAnnotatedRecyclerViewActivity_.IntentBuilder_(context);
  }

  public static WorkingAnnotatedRecyclerViewActivity_.IntentBuilder_ intent(android.app.Fragment fragment) {
    return new WorkingAnnotatedRecyclerViewActivity_.IntentBuilder_(fragment);
  }

  public static WorkingAnnotatedRecyclerViewActivity_.IntentBuilder_ intent(android.support.v4.app.Fragment supportFragment) {
    return new WorkingAnnotatedRecyclerViewActivity_.IntentBuilder_(supportFragment);
  }

  @Override
  public void onViewChanged(HasViews hasViews) {
    this.recyclerView = hasViews.internalFindViewById(R.id.recycler_view);
    initialize();
  }

  public final static class Adapter_
      extends Adapter
  {
    private Context context_;

    private Adapter_(Context context) {
      context_ = context;
      init_();
    }

    public static WorkingAnnotatedRecyclerViewActivity_.Adapter_ getInstance_(Context context) {
      return new WorkingAnnotatedRecyclerViewActivity_.Adapter_(context);
    }

    private void init_() {
      this.context = context_;
    }

    public void rebind(Context context) {
      context_ = context;
      init_();
    }
  }

  public static class IntentBuilder_
      extends ActivityIntentBuilder<WorkingAnnotatedRecyclerViewActivity_.IntentBuilder_>
  {
    private android.app.Fragment fragment_;
    private android.support.v4.app.Fragment fragmentSupport_;

    public IntentBuilder_(Context context) {
      super(context, WorkingAnnotatedRecyclerViewActivity_.class);
    }

    public IntentBuilder_(android.app.Fragment fragment) {
      super(fragment.getActivity(), WorkingAnnotatedRecyclerViewActivity_.class);
      fragment_ = fragment;
    }

    public IntentBuilder_(android.support.v4.app.Fragment fragment) {
      super(fragment.getActivity(), WorkingAnnotatedRecyclerViewActivity_.class);
      fragmentSupport_ = fragment;
    }

    @Override
    public PostActivityStarter startForResult(int requestCode) {
      if (fragmentSupport_!= null) {
        fragmentSupport_.startActivityForResult(intent, requestCode);
      } else {
        if (fragment_!= null) {
          fragment_.startActivityForResult(intent, requestCode, lastOptions);
        } else {
          if (context instanceof Activity) {
            Activity activity = ((Activity) context);
            ActivityCompat.startActivityForResult(activity, intent, requestCode, lastOptions);
          } else {
            context.startActivity(intent, lastOptions);
          }
        }
      }
      return new PostActivityStarter(context);
    }
  }


  /**
   * We use @SuppressWarning here because our java code
   * generator doesn't know that there is no need
   * to import OnXXXListeners from View as we already
   * are in a View.
   */
  @SuppressWarnings("unused")
  public static class ItemView_
      extends ItemView
      implements HasViews, OnViewChangedListener
  {
    private boolean alreadyInflated_ = false;
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private ViewGroup parent;

    public ItemView_(Context context) {
      super(context);
      init_();
    }

    public ItemView_(Context context, AttributeSet attrs) {
      super(context, attrs);
      init_();
    }

    public static ItemView build(Context context, ViewGroup parent) {
      final ItemView_ view = (ItemView_) LayoutInflater.from(parent.getContext())
          .inflate(R.layout.item_working_annotated, parent, false);
      view.onViewChanged(view);
      return view;
    }

    private void init_() {
      OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
      OnViewChangedNotifier.registerOnViewChangedListener(this);
      OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    @Override
    public<T extends View> T internalFindViewById(int id) {
      return ((T) this.findViewById(id));
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
      this.left = hasViews.internalFindViewById(R.id.left);
      this.right = hasViews.internalFindViewById(R.id.right);
    }
  }
}
